#!/bin/bash -l
#
# Script to submit shark for execution under different queueing systems
#
# ICRAR - International Centre for Radio Astronomy Research
# (c) UWA - The University of Western Australia, 2018
# Copyright by UWA (in the framework of the ICRAR)
# All rights reserved
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307  USA
#

info() {
	echo "shark-submit: $1"
}

error() {
	echo "shark-submit: ERROR: $1" 1>&2
}

warning() {
	echo "shark-submit: WARNING: $1" 1>&2
}

print_usage() {
	echo
	echo "$0: Submits shark for execution in a queueing system like SLURM or PBS/Torque"
	echo
	echo "Usage: $0 [-h] [-?] [-d] [-o output_dir] [-Q queue] [-a account] [-w walltime]"
	echo "       [-n job-name] [-m modules] [-N num-nodes] [-v | -q] [-S shark_binary]"
	echo "       [-V subvolumes] config_file"
	echo
	echo
	echo "General options:"
	echo
	echo " -h, -?          Show this help"
	echo
	echo " -d              Dry-run (i.e., don't actually submit shark)"
	echo
	echo
	echo "Queueing options"
	echo
	echo " -o output_dir   Directory where shark output will be written into. Defaults to"
	echo "                 a rolling shark_run_<xxxx> name. The SHARK_OUTPUT_DIR_BASE"
	echo "                 variable, if present, indicates where these directories should"
	echo "                 be created; otherwise they are created in the current working"
	echo "                 directory. If -W is given, the SHARK_OUTPUT_DIR_BASE variable"
	echo "                 is not taken into account"
	echo
	echo " -Q queue        The queue (or partition, in some queueing system parlance) to"
	echo "                 submit this job to"
	echo
	echo " -a account      The account to which this submission should be billed to"
	echo
	echo " -w walltime     The walltime to apply to this submission. Defaults to 1 [h]"
	echo
	echo " -n job-name     Job name for this submission"
	echo
	echo " -m modules      Colon-separted list of modules to load before running shark"
	echo
	echo " -N num-nodes    Number of nodes to request. If unspecified it is automatically"
	echo "                 calculated based on the number of subvolumes (-V option)"
	echo
	echo
	echo "SHArk-specific options"
	echo
	echo " -v              Run shark in verbose mode"
	echo
	echo " -q              Run shark in quiet mode"
	echo
	echo " -S shark-binary The shark binary to run. Defaults to standard PATH lookup"
	echo
	echo " -V subvolumes   Space-separated list of subvolumes to process. Can contain"
	echo "                 ranges like 1-10. Defaults to whatever is present in the"
	echo "                 configuration file"
	echo
	echo " config_file:    The reference configuration file to use for this shark execution"
	echo
}

submit_slurm() {

	# Each SHArk instance uses one CPU
	cmd="sbatch --ntasks $n_svols --cpus-per-task 1"
	cmd="$cmd -o shark-run.out -e shark-run.err"

	# Queueing accountability
	if [ ! -z "$num_nodes" ]
	then
		cmd="$cmd -N $num_nodes"
	fi

	if [ ! -z "$account" ]
	then
		cmd="$cmd -A $account"
	fi

	if [ ! -z "$queue" ]
	then
		cmd="$cmd -p $queue"
	fi

	if [ ! -z "$walltime" ]
	then
		cmd="$cmd --time $walltime"
	fi

	if [ ! -z "$job_name" ]
	then
		cmd="$cmd --job-name $job_name"
	fi

	cmd="$cmd -D $shark_output_directory"
	cmd="$cmd shark-run -v $shark_verbosity"

	# shark-run command-line options
	if [ ! -z "$modules" ]
	then
		cmd="$cmd -m $modules"
	fi

	if [ ! -z "$shark_binary" ]
	then
		cmd="$cmd -S $shark_binary"
	fi

	cmd="$cmd -V \"$shark_subvolumes\" $config_file"

	if [ "$dry_run" = "1" ]
	then
		info "SLURM shark job submission command: $cmd"
		info ""
		info "THIS WAS NOT SUBMITTED, since this is a dry run"
		info "If you really want to submit, remove the -d option from the command line"
		info ""
	else
		info "Submitting shark job with command: $cmd"

		# Go, go, go!
		eval $cmd || error "Error when submitting job to the queue"
	fi
}

# Default option values
# These are global variables, so we don't need to pass them around all the time
dry_run=
verbose=
quiet=
shark_output_directory=
queue=
account=
job_name=
walltime="1:00:00"
modules=
num_nodes=
shark_verbosity=3
shark_binary=
shark_subvolumes=

# Parse command line options
while getopts "h?do:Q:a:w:n:m:N:vqS:V:" opt
do
	case "$opt" in
		[h?])
			print_usage
			exit 0
			;;
		d)
			dry_run=1
			;;
		v)
			if [ ! -z "$quiet" ]
			then
				error "-v and -q cannot be specified together"
				print_usage 1>&2
				exit 1
			fi
			verbose=1
			shark_verbosity=4
			;;
		q)
			if [ ! -z "$verbose" ]
			then
				error "-v and -q cannot be specified together"
				print_usage 1>&2
				exit 1
			fi
			quiet=1
			shark_verbosity=2
			;;
		S)
			shark_binary="$OPTARG"
			;;
		V)
			shark_subvolumes="$OPTARG"
			;;
		o)
			shark_output_directory="$OPTARG"
			;;
		Q)
			queue="$OPTARG"
			;;
		a)
			account="$OPTARG"
			;;
		w)
			walltime="$OPTARG"
			;;
		n)
			job_name="$OPTARG"
			;;
		m)
			modules="$OPTARG"
			;;
		N)
			num_nodes="$OPTARG"
			;;
		*)
			print_usage 1>&2
			exit 1
			;;
	esac
done

# Positional argument is the configuration file name
if [ $(($# - $OPTIND)) -lt 0 ]
then
	error "Missing config_file option"
	print_usage 1>&2
	exit 1
fi
config_file=${@:$OPTIND:1}

# Make sure the configuration file exists
if [ ! -f ${config_file} ]
then
	error "File ${config_file} is not an existing (or accessible) file"
	exit 1
fi

# Check which subvolumes we are meant to run shark on
# This will determine the number of nodes we request
# at the end of the day
if [ -z "$shark_subvolumes" ]
then
	# Default to whatever is written into the configuration file
	shark_subvolumes="`egrep '^simulation_batches' "$config_file" | sed -e 's/^simulation_batches\s*=\s*\([^#]\+\).*/\1/'`"
fi

# Convert subvolumes specification (which may contain space- and
# hypen-separated values) into a proper list of values
svols=""
for s in $shark_subvolumes
do
	if [[ "$s" == *"-"* ]]
	then
		first=${s%%-*}
		second=${s##*-}
		for i in `eval echo {${first}..${second}}`
		do
			svols="$svols $i"
		done
	else
		svols="$svols $s"
	fi
done
shark_subvolumes="$svols"
svols=($svols)
n_svols=${#svols[@]}
info "Will submit shark to work on $n_svols subvolumes: $shark_subvolumes"

# Calculate number of nodes needed for this submission,
# based on the number of subvolumes to process.
# Skip if the user already enforced a number of nodes already
if [ -z "$num_nodes" ]
then
	num_nodes=$(($n_svols / 24))
	residual=$(($n_svols % 24))
	if [ $residual -ne 0 ]
	then
		num_nodes=$(($num_nodes + 1))
	fi
fi
info "This submission will request $num_nodes nodes"

# Make sure we have a proper working directory
if [ ! -z "$shark_output_directory" ]
then
	mkdir -p "$shark_output_directory"
	if [ ! -d "$shark_output_directory" ]
	then
		error "Couldn't create shark output directory at $shark_output_directory"
		exit 1
	fi
else
	basedir=${SHARK_OUTPUT_DIR_BASE:-.}
	i=0
	for i in `seq -w 1 9999`
	do
		shark_output_directory="$basedir/shark_run_$i"
		test ! -d "$shark_output_directory" && mkdir -p "$shark_output_directory" &> /dev/null && break
	done
fi
info "Will run shark-run under $shark_output_directory"

# Copy the configuration file over to the working directory
config_file_bname=`basename $config_file`
cp "$config_file" "$shark_output_directory"
config_file="$config_file_bname"
info "Configuration file copied to $shark_output_directory/$config_file"

# Check which queueing system there is
queue_system=
if [ ! -z "$(command -v sbatch 2> /dev/null)" ]
then
	queue_system="SLURM"
elif [ ! -z "$(command -v qsub 2> /dev/null)" ]
then
	queue_system="PBS/Torque"
else
	error "Cannot determine queue system present in this environment"
	exit 1
fi
info "Submitting shark to $queue_system"

if [ $queue_system = SLURM ]
then
	submit_slurm
else
	error "PBS/Torque still not supported"
	exit 1
fi

info "Submissiong successful. Thanks for using our shark-submit script, come back soon :-)"
